function g(x){return crypto.getRandomValues(new Uint8Array(x))}const l=new Uint8Array([0,255,200,8,145,16,208,54,90,62,216,67,153,119,254,24,35,32,7,112,161,108,12,127,98,139,64,70,199,75,224,14,235,22,232,173,207,205,57,83,106,39,53,147,212,78,72,195,43,121,84,40,9,120,15,33,144,135,20,42,169,156,214,116,180,124,222,237,177,134,118,164,152,226,150,143,2,50,28,193,51,238,239,129,253,48,92,19,157,41,23,196,17,68,140,128,243,115,66,30,29,181,240,18,209,91,65,162,215,44,233,213,89,203,80,168,220,252,242,86,114,166,101,47,159,155,61,186,125,194,69,130,167,87,182,163,122,117,79,174,63,55,109,71,97,190,171,211,95,176,88,175,202,94,250,133,228,77,138,5,251,96,183,123,184,38,74,103,198,26,248,105,37,179,219,189,102,221,241,210,223,3,141,52,217,146,13,99,85,170,73,236,188,149,60,132,11,245,230,231,229,172,126,110,185,249,218,142,154,201,36,225,10,21,107,58,160,81,244,234,178,151,158,93,34,136,148,206,25,1,113,76,165,227,197,49,187,204,31,45,59,82,111,246,46,137,247,192,104,27,100,4,6,191,131,56]),m=new Uint8Array([1,229,76,181,251,159,252,18,3,52,212,196,22,186,31,54,5,92,103,87,58,213,33,90,15,228,169,249,78,100,99,238,17,55,224,16,210,172,165,41,51,89,59,48,109,239,244,123,85,235,77,80,183,42,7,141,255,38,215,240,194,126,9,140,26,106,98,11,93,130,27,143,46,190,166,29,231,157,45,138,114,217,241,39,50,188,119,133,150,112,8,105,86,223,153,148,161,144,24,187,250,122,176,167,248,171,40,214,21,142,203,242,19,230,120,97,63,137,70,13,53,49,136,163,65,128,202,23,95,83,131,254,195,155,69,57,225,245,158,25,94,182,207,75,56,4,185,43,226,193,74,221,72,12,208,125,61,88,222,124,216,20,107,135,71,232,121,132,115,60,189,146,201,35,139,151,149,68,220,173,64,101,134,162,164,204,127,236,192,175,145,253,247,79,129,47,91,234,168,28,2,209,152,113,237,37,227,36,6,104,179,147,44,111,62,108,10,184,206,174,116,177,66,180,30,211,73,233,156,200,198,199,34,110,219,32,191,67,81,82,102,178,118,96,218,197,243,246,170,205,154,160,117,84,14,1]);function u(x,e){if(!Number.isInteger(x)||x<0||x>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");return x^e}function y(x,e){if(!Number.isInteger(x)||x<0||x>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");if(e===0)throw new Error("cannot divide by zero");const t=l[x],n=l[e],r=(t-n+255)%255,o=m[r];return x===0?0:o}function h(x,e){if(!Number.isInteger(x)||x<0||x>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");const t=l[x],n=l[e],r=(t+n)%255,o=m[r];return x===0||e===0?0:o}function A(x,e,t){if(x.length!==e.length)throw new Error("sample length mistmatch");const n=x.length;let r=0,o=0;for(let i=0;i<n;i++){r=1;for(let a=0;a<n;++a){if(i===a)continue;const b=u(t,x[a]),c=u(x[i],x[a]),s=y(b,c);r=h(r,s)}o=u(o,h(e[i],r))}return o}function E(x,e,t){if(e===0)throw new Error("cannot evaluate secret polynomial at zero");let n=x[t];for(let r=t-1;r>=0;r--){const o=x[r];n=u(h(n,e),o)}return n}function U(x,e){const t=new Uint8Array(e+1);return t[0]=x,t.set(g(e),1),t}function N(){const x=new Uint8Array(255);for(let t=0;t<255;t++)x[t]=t+1;const e=g(255);for(let t=0;t<255;t++){const n=e[t]%255,r=x[t];x[t]=x[n],x[n]=r}return x}const f={instanceOf(x,e,t){if(x.constructor!==e)throw new TypeError(t)},inRange(x,e,t,n){if(!(e<t&&x>=e&&x<t))throw new RangeError(n)},greaterThanOrEqualTo(x,e,t){if(x<e)throw new Error(t)},equalTo(x,e,t){if(x!==e)throw new Error(t)}};async function L(x,e,t){f.instanceOf(x,Uint8Array,"secret must be a Uint8Array"),f.greaterThanOrEqualTo(x.byteLength,1,"secret cannot be empty"),f.instanceOf(e,Number,"shares must be a number"),f.inRange(e,2,256,"shares must be at least 2 and at most 255"),f.instanceOf(t,Number,"threshold must be a number"),f.inRange(t,2,256,"threshold must be at least 2 and at most 255"),f.greaterThanOrEqualTo(e,t,"shares cannot be less than threshold");const n=[],r=x.byteLength,o=N();for(let a=0;a<e;a++){const b=new Uint8Array(r+1);b[r]=o[a],n.push(b)}const i=t-1;for(let a=0;a<r;a++){const b=x[a],c=U(b,i);for(let s=0;s<e;++s){const d=o[s],w=E(c,d,i);n[s][a]=w}}return n}async function R(x){f.instanceOf(x,Array,"shares must be an Array"),f.inRange(x.length,2,256,"shares must have at least 2 and at most 255 elements");const e=x[0];f.instanceOf(e,Uint8Array,"each share must be a Uint8Array");for(const c of x)f.instanceOf(c,Uint8Array,"each share must be a Uint8Array"),f.greaterThanOrEqualTo(c.byteLength,2,"each share must be at least 2 bytes"),f.equalTo(c.byteLength,e.byteLength,"all shares must have the same byte length");const t=x.length,n=e.byteLength,r=n-1,o=new Uint8Array(r),i=new Uint8Array(t),a=new Uint8Array(t),b=new Set;for(let c=0;c<t;c++){const d=x[c][n-1];if(b.has(d))throw new Error("shares must contain unique values but a duplicate was found");b.add(d),i[c]=d}for(let c=0;c<r;c++){for(let s=0;s<t;++s)a[s]=x[s][c];o[c]=A(i,a,0)}return o}export{R as combine,L as split};
