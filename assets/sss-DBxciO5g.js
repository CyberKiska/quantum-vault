import{_ as a}from"./index-BbuMKs9Q.js";async function s(e,t,o){if(!(e instanceof Uint8Array))throw new Error("Secret must be Uint8Array");if(e.length===0)throw new Error("Secret cannot be empty");if(!Number.isInteger(t)||!Number.isInteger(o))throw new Error("n and t must be integers");if(o<2)throw new Error("Threshold must be at least 2");if(o>t)throw new Error("Threshold cannot exceed total shares");if(t>255)throw new Error("Maximum 255 shares supported");const r=await a(()=>import("./index-Dc-5h1cZ.js"),[]);try{const i=await r.split(e,t,o);if(!Array.isArray(i)||i.length!==t)throw new Error(`Expected ${t} shares, got ${i.length}`);return i.map(n=>{if(n instanceof Uint8Array)return n;if(n instanceof ArrayBuffer)return new Uint8Array(n);if(ArrayBuffer.isView(n))return new Uint8Array(n.buffer,n.byteOffset,n.byteLength);throw new Error("Invalid share format returned by SSS library")})}catch(i){throw new Error(`Shamir Secret Sharing failed: ${i.message}`)}}async function w(e){if(!Array.isArray(e))throw new Error("Shares must be an array");if(e.length<2)throw new Error("Need at least 2 shares to reconstruct secret");if(e.length>255)throw new Error("Too many shares provided (max 255)");for(let r=0;r<e.length;r++){if(!(e[r]instanceof Uint8Array))throw new Error(`Share ${r} must be Uint8Array`);if(e[r].length===0)throw new Error(`Share ${r} is empty`)}const t=e[0].length;for(let r=1;r<e.length;r++)if(e[r].length!==t)throw new Error(`Share length mismatch: share 0 has ${t} bytes, share ${r} has ${e[r].length} bytes`);const o=await a(()=>import("./index-Dc-5h1cZ.js"),[]);try{const r=await o.combine(e);if(r instanceof Uint8Array)return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Invalid secret format returned by SSS library")}catch(r){throw new Error(`Shamir Secret reconstruction failed: ${r.message}`)}}export{w as combineShares,s as splitSecret};
